# -*- coding: utf-8 -*-
"""IDS_AI_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aRDiTDqBlVNbBdfM-D290uFfE5vNgxzY

## performance evaluation of machine learning to detect intrusion in the network traffic data
"""

import numpy as np
import pandas as pd
from sklearn import preprocessing
from sklearn.svm import SVC
from xgboost import XGBClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, ConfusionMatrixDisplay

data = pd.read_csv("/content/drive/MyDrive/data/Thursday-WorkingHours-Morning-WebAttacks.pcap_ISCX.csv")

print (data.shape)
data.head()

data.info()

data[' Label'].value_counts() # count the values of the target variable

data.describe()

"""#### Tarnsform the target column from string to numbers using labelencoder from sklearn"""

le = preprocessing.LabelEncoder()
data['Label'] = le.fit_transform(data[' Label'])
data.drop(' Label', axis = 1, inplace = True)
data.head()

"""#### Subset the dataframe into input and target variables"""

X = data.drop('Label', axis = 1)
y = data['Label']

"""#### Split the dataset into train and test set"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3,random_state=42)

"""#### Removing the infinity and NaN values"""

if np.any(np.isinf(X_train)) or np.any(np.isnan(X_train)):
    print("Data contains infinite or NaN values")

from sklearn.impute import SimpleImputer
X_train = np.where(np.isinf(X_train), np.nan, X_train)
X_test = np.where(np.isinf(X_test), np.nan, X_test)

imputer = SimpleImputer(missing_values=np.nan, strategy='mean')  # use the mean to fill the inf and nan values
X_train = imputer.fit_transform(X_train)
X_test = imputer.transform(X_test)

"""#### Transform the dataset"""

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

"""### Model Training with Support Vector Machine"""

svm_clf = SVC()
svm_clf.fit(X_train, y_train)
svm_pred = svm_clf.predict(X_test)

accuracy_score(y_test, svm_pred)

print(classification_report(y_test, svm_pred, zero_division=0))

from matplotlib import pyplot as plt
cm = confusion_matrix(y_test, svm_pred, labels=svm_clf.classes_)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=svm_clf.classes_)
disp.plot()
plt.show()

print(confusion_matrix(y_test, svm_pred))

"""#### Implement the Random RandomForestClassifier"""

rf_clf = RandomForestClassifier()
rf_clf.fit(X_train, y_train)
rf_pred = rf_clf.predict(X_test)

"""#### Evaluation of Random Forest"""

accuracy_score(y_test, rf_pred)

print(classification_report(y_test, rf_pred, zero_division=0))

cm_rf = confusion_matrix(y_test, rf_pred, labels=rf_clf.classes_)
disp_rf = ConfusionMatrixDisplay(confusion_matrix=cm_rf, display_labels=rf_clf.classes_)
disp_rf.plot()
plt.show()

print(confusion_matrix(y_test, rf_pred))

"""#### Implementing XGBoost"""

xgb_clf = XGBClassifier()
xgb_clf.fit(X_train, y_train)
xgb_pred = xgb_clf.predict(X_test)

"""#### Evaluation of XGBoost"""

accuracy_score(y_test, xgb_pred)

print(classification_report(y_test, xgb_pred, zero_division=0))

cm_xgb = confusion_matrix(y_test, xgb_pred, labels=xgb_clf.classes_)
disp_xgb = ConfusionMatrixDisplay(confusion_matrix=cm_xgb, display_labels=xgb_clf.classes_)
disp_xgb.plot()
plt.show()

print(confusion_matrix(y_test, xgb_pred))